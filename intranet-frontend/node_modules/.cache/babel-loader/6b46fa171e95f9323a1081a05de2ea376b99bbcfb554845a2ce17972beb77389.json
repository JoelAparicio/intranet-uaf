{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { onMounted, onUnmounted, ref } from 'vue';\nimport * as THREE from 'three';\nexport default {\n  setup() {\n    const container = ref(null);\n    let scene, camera, renderer, particles;\n    const clock = new THREE.Clock();\n    const init = () => {\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.setClearColor(0xffffff, 1); // Fondo blanco\n      container.value.appendChild(renderer.domElement);\n\n      // Crear textura circular para las partículas\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      canvas.width = canvas.height = 32;\n      ctx.beginPath();\n      ctx.arc(16, 16, 14, 0, 2 * Math.PI);\n      ctx.fillStyle = '#024a9f';\n      ctx.fill();\n      const circleTexture = new THREE.CanvasTexture(canvas);\n\n      // Crear sistema de partículas\n      const particleCount = 500;\n      const positions = new Float32Array(particleCount * 3);\n      const sizes = new Float32Array(particleCount);\n      for (let i = 0; i < particleCount; i++) {\n        positions[i * 3] = (Math.random() - 0.5) * 10;\n        positions[i * 3 + 1] = (Math.random() - 0.5) * 10;\n        positions[i * 3 + 2] = (Math.random() - 0.5) * 10;\n        sizes[i] = Math.random() * 0.1 + 0.02;\n      }\n      const geometry = new THREE.BufferGeometry();\n      geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n      geometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\n      const particleMaterial = new THREE.PointsMaterial({\n        color: 0x024a9f,\n        map: circleTexture,\n        transparent: true,\n        alphaTest: 0.5,\n        sizeAttenuation: true\n      });\n      particles = new THREE.Points(geometry, particleMaterial);\n      scene.add(particles);\n\n      // Añadir logo UAF\n      const loader = new THREE.TextureLoader();\n      loader.load('../assets/UAF_logo.png', texture => {\n        const material = new THREE.SpriteMaterial({\n          map: texture\n        });\n        const logo = new THREE.Sprite(material);\n        logo.scale.set(2, 2, 1);\n        scene.add(logo);\n      });\n      camera.position.z = 5;\n    };\n    const animate = () => {\n      requestAnimationFrame(animate);\n      const time = clock.getElapsedTime();\n      if (particles) {\n        particles.rotation.x = time * 0.05;\n        particles.rotation.y = time * 0.075;\n        const positions = particles.geometry.attributes.position.array;\n        const sizes = particles.geometry.attributes.size.array;\n        for (let i = 0; i < positions.length; i += 3) {\n          positions[i] += Math.sin(time + positions[i + 1]) * 0.01;\n          positions[i + 1] += Math.cos(time + positions[i]) * 0.01;\n          sizes[i / 3] = (Math.sin(time + positions[i / 3]) + 1.5) * 0.05;\n        }\n        particles.geometry.attributes.position.needsUpdate = true;\n        particles.geometry.attributes.size.needsUpdate = true;\n      }\n      renderer.render(scene, camera);\n    };\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    onMounted(() => {\n      init();\n      animate();\n      window.addEventListener('resize', handleResize);\n    });\n    onUnmounted(() => {\n      if (renderer) {\n        renderer.dispose();\n      }\n      window.removeEventListener('resize', handleResize);\n    });\n    return {\n      container\n    };\n  }\n};","map":{"version":3,"names":["onMounted","onUnmounted","ref","THREE","setup","container","scene","camera","renderer","particles","clock","Clock","init","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","antialias","alpha","setSize","setClearColor","value","appendChild","domElement","canvas","document","createElement","ctx","getContext","width","height","beginPath","arc","Math","PI","fillStyle","fill","circleTexture","CanvasTexture","particleCount","positions","Float32Array","sizes","i","random","geometry","BufferGeometry","setAttribute","BufferAttribute","particleMaterial","PointsMaterial","color","map","transparent","alphaTest","sizeAttenuation","Points","add","loader","TextureLoader","load","texture","material","SpriteMaterial","logo","Sprite","scale","set","position","z","animate","requestAnimationFrame","time","getElapsedTime","rotation","x","y","attributes","array","size","length","sin","cos","needsUpdate","render","handleResize","aspect","updateProjectionMatrix","addEventListener","dispose","removeEventListener"],"sources":["C:\\laragon\\www\\intranet-frontend\\src\\components\\ThreeScene.vue"],"sourcesContent":["<template>\r\n    <div ref=\"container\"></div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { onMounted, onUnmounted, ref } from 'vue';\r\n  import * as THREE from 'three';\r\n  \r\n  export default {\r\n    setup() {\r\n      const container = ref(null);\r\n      let scene, camera, renderer, particles;\r\n      const clock = new THREE.Clock();\r\n  \r\n      const init = () => {\r\n        scene = new THREE.Scene();\r\n        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n        renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        renderer.setClearColor(0xffffff, 1); // Fondo blanco\r\n        container.value.appendChild(renderer.domElement);\r\n  \r\n        // Crear textura circular para las partículas\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        canvas.width = canvas.height = 32;\r\n        ctx.beginPath();\r\n        ctx.arc(16, 16, 14, 0, 2 * Math.PI);\r\n        ctx.fillStyle = '#024a9f';\r\n        ctx.fill();\r\n        const circleTexture = new THREE.CanvasTexture(canvas);\r\n  \r\n        // Crear sistema de partículas\r\n        const particleCount = 500;\r\n        const positions = new Float32Array(particleCount * 3);\r\n        const sizes = new Float32Array(particleCount);\r\n  \r\n        for (let i = 0; i < particleCount; i++) {\r\n          positions[i * 3] = (Math.random() - 0.5) * 10;\r\n          positions[i * 3 + 1] = (Math.random() - 0.5) * 10;\r\n          positions[i * 3 + 2] = (Math.random() - 0.5) * 10;\r\n          sizes[i] = Math.random() * 0.1 + 0.02;\r\n        }\r\n  \r\n        const geometry = new THREE.BufferGeometry();\r\n        geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n        geometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\r\n  \r\n        const particleMaterial = new THREE.PointsMaterial({\r\n          color: 0x024a9f,\r\n          map: circleTexture,\r\n          transparent: true,\r\n          alphaTest: 0.5,\r\n          sizeAttenuation: true\r\n        });\r\n  \r\n        particles = new THREE.Points(geometry, particleMaterial);\r\n        scene.add(particles);\r\n  \r\n        // Añadir logo UAF\r\n        const loader = new THREE.TextureLoader();\r\n        loader.load('../assets/UAF_logo.png', (texture) => {\r\n          const material = new THREE.SpriteMaterial({ map: texture });\r\n          const logo = new THREE.Sprite(material);\r\n          logo.scale.set(2, 2, 1);\r\n          scene.add(logo);\r\n        });\r\n  \r\n        camera.position.z = 5;\r\n      };\r\n  \r\n      const animate = () => {\r\n        requestAnimationFrame(animate);\r\n        const time = clock.getElapsedTime();\r\n        \r\n        if (particles) {\r\n          particles.rotation.x = time * 0.05;\r\n          particles.rotation.y = time * 0.075;\r\n  \r\n          const positions = particles.geometry.attributes.position.array;\r\n          const sizes = particles.geometry.attributes.size.array;\r\n          for (let i = 0; i < positions.length; i += 3) {\r\n            positions[i] += Math.sin(time + positions[i + 1]) * 0.01;\r\n            positions[i + 1] += Math.cos(time + positions[i]) * 0.01;\r\n            sizes[i / 3] = (Math.sin(time + positions[i / 3]) + 1.5) * 0.05;\r\n          }\r\n          particles.geometry.attributes.position.needsUpdate = true;\r\n          particles.geometry.attributes.size.needsUpdate = true;\r\n        }\r\n  \r\n        renderer.render(scene, camera);\r\n      };\r\n  \r\n      const handleResize = () => {\r\n        camera.aspect = window.innerWidth / window.innerHeight;\r\n        camera.updateProjectionMatrix();\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n      };\r\n  \r\n      onMounted(() => {\r\n        init();\r\n        animate();\r\n        window.addEventListener('resize', handleResize);\r\n      });\r\n  \r\n      onUnmounted(() => {\r\n        if (renderer) {\r\n          renderer.dispose();\r\n        }\r\n        window.removeEventListener('resize', handleResize);\r\n      });\r\n  \r\n      return { container };\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  div {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: -1;\r\n  }\r\n  </style>"],"mappings":";;;;;;AAKE,SAASA,SAAS,EAAEC,WAAW,EAAEC,GAAE,QAAS,KAAK;AACjD,OAAO,KAAKC,KAAI,MAAO,OAAO;AAE9B,eAAe;EACbC,KAAKA,CAAA,EAAG;IACN,MAAMC,SAAQ,GAAIH,GAAG,CAAC,IAAI,CAAC;IAC3B,IAAII,KAAK,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,SAAS;IACtC,MAAMC,KAAI,GAAI,IAAIP,KAAK,CAACQ,KAAK,CAAC,CAAC;IAE/B,MAAMC,IAAG,GAAIA,CAAA,KAAM;MACjBN,KAAI,GAAI,IAAIH,KAAK,CAACU,KAAK,CAAC,CAAC;MACzBN,MAAK,GAAI,IAAIJ,KAAK,CAACW,iBAAiB,CAAC,EAAE,EAAEC,MAAM,CAACC,UAAS,GAAID,MAAM,CAACE,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC;MAC3FT,QAAO,GAAI,IAAIL,KAAK,CAACe,aAAa,CAAC;QAAEC,SAAS,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC;MACpEZ,QAAQ,CAACa,OAAO,CAACN,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;MACvDT,QAAQ,CAACc,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE;MACrCjB,SAAS,CAACkB,KAAK,CAACC,WAAW,CAAChB,QAAQ,CAACiB,UAAU,CAAC;;MAEhD;MACA,MAAMC,MAAK,GAAIC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/C,MAAMC,GAAE,GAAIH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;MACnCJ,MAAM,CAACK,KAAI,GAAIL,MAAM,CAACM,MAAK,GAAI,EAAE;MACjCH,GAAG,CAACI,SAAS,CAAC,CAAC;MACfJ,GAAG,CAACK,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,IAAIC,IAAI,CAACC,EAAE,CAAC;MACnCP,GAAG,CAACQ,SAAQ,GAAI,SAAS;MACzBR,GAAG,CAACS,IAAI,CAAC,CAAC;MACV,MAAMC,aAAY,GAAI,IAAIpC,KAAK,CAACqC,aAAa,CAACd,MAAM,CAAC;;MAErD;MACA,MAAMe,aAAY,GAAI,GAAG;MACzB,MAAMC,SAAQ,GAAI,IAAIC,YAAY,CAACF,aAAY,GAAI,CAAC,CAAC;MACrD,MAAMG,KAAI,GAAI,IAAID,YAAY,CAACF,aAAa,CAAC;MAE7C,KAAK,IAAII,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIJ,aAAa,EAAEI,CAAC,EAAE,EAAE;QACtCH,SAAS,CAACG,CAAA,GAAI,CAAC,IAAI,CAACV,IAAI,CAACW,MAAM,CAAC,IAAI,GAAG,IAAI,EAAE;QAC7CJ,SAAS,CAACG,CAAA,GAAI,IAAI,CAAC,IAAI,CAACV,IAAI,CAACW,MAAM,CAAC,IAAI,GAAG,IAAI,EAAE;QACjDJ,SAAS,CAACG,CAAA,GAAI,IAAI,CAAC,IAAI,CAACV,IAAI,CAACW,MAAM,CAAC,IAAI,GAAG,IAAI,EAAE;QACjDF,KAAK,CAACC,CAAC,IAAIV,IAAI,CAACW,MAAM,CAAC,IAAI,GAAE,GAAI,IAAI;MACvC;MAEA,MAAMC,QAAO,GAAI,IAAI5C,KAAK,CAAC6C,cAAc,CAAC,CAAC;MAC3CD,QAAQ,CAACE,YAAY,CAAC,UAAU,EAAE,IAAI9C,KAAK,CAAC+C,eAAe,CAACR,SAAS,EAAE,CAAC,CAAC,CAAC;MAC1EK,QAAQ,CAACE,YAAY,CAAC,MAAM,EAAE,IAAI9C,KAAK,CAAC+C,eAAe,CAACN,KAAK,EAAE,CAAC,CAAC,CAAC;MAElE,MAAMO,gBAAe,GAAI,IAAIhD,KAAK,CAACiD,cAAc,CAAC;QAChDC,KAAK,EAAE,QAAQ;QACfC,GAAG,EAAEf,aAAa;QAClBgB,WAAW,EAAE,IAAI;QACjBC,SAAS,EAAE,GAAG;QACdC,eAAe,EAAE;MACnB,CAAC,CAAC;MAEFhD,SAAQ,GAAI,IAAIN,KAAK,CAACuD,MAAM,CAACX,QAAQ,EAAEI,gBAAgB,CAAC;MACxD7C,KAAK,CAACqD,GAAG,CAAClD,SAAS,CAAC;;MAEpB;MACA,MAAMmD,MAAK,GAAI,IAAIzD,KAAK,CAAC0D,aAAa,CAAC,CAAC;MACxCD,MAAM,CAACE,IAAI,CAAC,wBAAwB,EAAGC,OAAO,IAAK;QACjD,MAAMC,QAAO,GAAI,IAAI7D,KAAK,CAAC8D,cAAc,CAAC;UAAEX,GAAG,EAAES;QAAQ,CAAC,CAAC;QAC3D,MAAMG,IAAG,GAAI,IAAI/D,KAAK,CAACgE,MAAM,CAACH,QAAQ,CAAC;QACvCE,IAAI,CAACE,KAAK,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACvB/D,KAAK,CAACqD,GAAG,CAACO,IAAI,CAAC;MACjB,CAAC,CAAC;MAEF3D,MAAM,CAAC+D,QAAQ,CAACC,CAAA,GAAI,CAAC;IACvB,CAAC;IAED,MAAMC,OAAM,GAAIA,CAAA,KAAM;MACpBC,qBAAqB,CAACD,OAAO,CAAC;MAC9B,MAAME,IAAG,GAAIhE,KAAK,CAACiE,cAAc,CAAC,CAAC;MAEnC,IAAIlE,SAAS,EAAE;QACbA,SAAS,CAACmE,QAAQ,CAACC,CAAA,GAAIH,IAAG,GAAI,IAAI;QAClCjE,SAAS,CAACmE,QAAQ,CAACE,CAAA,GAAIJ,IAAG,GAAI,KAAK;QAEnC,MAAMhC,SAAQ,GAAIjC,SAAS,CAACsC,QAAQ,CAACgC,UAAU,CAACT,QAAQ,CAACU,KAAK;QAC9D,MAAMpC,KAAI,GAAInC,SAAS,CAACsC,QAAQ,CAACgC,UAAU,CAACE,IAAI,CAACD,KAAK;QACtD,KAAK,IAAInC,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIH,SAAS,CAACwC,MAAM,EAAErC,CAAA,IAAK,CAAC,EAAE;UAC5CH,SAAS,CAACG,CAAC,KAAKV,IAAI,CAACgD,GAAG,CAACT,IAAG,GAAIhC,SAAS,CAACG,CAAA,GAAI,CAAC,CAAC,IAAI,IAAI;UACxDH,SAAS,CAACG,CAAA,GAAI,CAAC,KAAKV,IAAI,CAACiD,GAAG,CAACV,IAAG,GAAIhC,SAAS,CAACG,CAAC,CAAC,IAAI,IAAI;UACxDD,KAAK,CAACC,CAAA,GAAI,CAAC,IAAI,CAACV,IAAI,CAACgD,GAAG,CAACT,IAAG,GAAIhC,SAAS,CAACG,CAAA,GAAI,CAAC,CAAC,IAAI,GAAG,IAAI,IAAI;QACjE;QACApC,SAAS,CAACsC,QAAQ,CAACgC,UAAU,CAACT,QAAQ,CAACe,WAAU,GAAI,IAAI;QACzD5E,SAAS,CAACsC,QAAQ,CAACgC,UAAU,CAACE,IAAI,CAACI,WAAU,GAAI,IAAI;MACvD;MAEA7E,QAAQ,CAAC8E,MAAM,CAAChF,KAAK,EAAEC,MAAM,CAAC;IAChC,CAAC;IAED,MAAMgF,YAAW,GAAIA,CAAA,KAAM;MACzBhF,MAAM,CAACiF,MAAK,GAAIzE,MAAM,CAACC,UAAS,GAAID,MAAM,CAACE,WAAW;MACtDV,MAAM,CAACkF,sBAAsB,CAAC,CAAC;MAC/BjF,QAAQ,CAACa,OAAO,CAACN,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACzD,CAAC;IAEDjB,SAAS,CAAC,MAAM;MACdY,IAAI,CAAC,CAAC;MACN4D,OAAO,CAAC,CAAC;MACTzD,MAAM,CAAC2E,gBAAgB,CAAC,QAAQ,EAAEH,YAAY,CAAC;IACjD,CAAC,CAAC;IAEFtF,WAAW,CAAC,MAAM;MAChB,IAAIO,QAAQ,EAAE;QACZA,QAAQ,CAACmF,OAAO,CAAC,CAAC;MACpB;MACA5E,MAAM,CAAC6E,mBAAmB,CAAC,QAAQ,EAAEL,YAAY,CAAC;IACpD,CAAC,CAAC;IAEF,OAAO;MAAElF;IAAU,CAAC;EACtB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}