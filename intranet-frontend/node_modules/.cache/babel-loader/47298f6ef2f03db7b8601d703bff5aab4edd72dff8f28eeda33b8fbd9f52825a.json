{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { ref, onMounted } from 'vue';\nimport * as THREE from 'three';\nexport default {\n  name: 'FondoParticulas',\n  setup() {\n    const threeContainer = ref(null);\n    let scene;\n    let camera;\n    let renderer;\n    onMounted(() => {\n      initThree();\n    });\n    const initThree = () => {\n      // Crear escena\n      scene = new THREE.Scene();\n\n      // Crear cámara\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      camera.position.z = 5;\n\n      // Crear renderizador\n      renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      if (threeContainer.value) {\n        threeContainer.value.appendChild(renderer.domElement);\n      }\n\n      // Crear partículas\n      const particlesGeometry = new THREE.BufferGeometry();\n      const particlesCount = 10000;\n      const posArray = new Float32Array(particlesCount * 3);\n      for (let i = 0; i < particlesCount * 3; i++) {\n        posArray[i] = (Math.random() - 0.5) * 10;\n      }\n      particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));\n      const particlesMaterial = new THREE.PointsMaterial({\n        size: 0.05,\n        color: 0x0000ff // Color azul\n      });\n      const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);\n      scene.add(particlesMesh);\n\n      // Añadir animación\n      animate();\n\n      // Ajustar el renderizador al cambiar el tamaño de la ventana\n      window.addEventListener('resize', onWindowResize, false);\n    };\n    const animate = () => {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n    const onWindowResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    return {\n      threeContainer\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","THREE","name","setup","threeContainer","scene","camera","renderer","initThree","Scene","PerspectiveCamera","window","innerWidth","innerHeight","position","z","WebGLRenderer","setSize","value","appendChild","domElement","particlesGeometry","BufferGeometry","particlesCount","posArray","Float32Array","i","Math","random","setAttribute","BufferAttribute","particlesMaterial","PointsMaterial","size","color","particlesMesh","Points","add","animate","addEventListener","onWindowResize","requestAnimationFrame","render","aspect","updateProjectionMatrix"],"sources":["C:\\laragon\\www\\intranet-frontend\\src\\components\\FondoParticulas.vue"],"sourcesContent":["<template>\r\n    <div ref=\"threeContainer\" class=\"three-container\"></div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { ref, onMounted } from 'vue';\r\n  import * as THREE from 'three';\r\n  \r\n  export default {\r\n    name: 'FondoParticulas',\r\n    setup() {\r\n      const threeContainer = ref(null);\r\n      let scene;\r\n      let camera;\r\n      let renderer;\r\n  \r\n      onMounted(() => {\r\n        initThree();\r\n      });\r\n  \r\n      const initThree = () => {\r\n        // Crear escena\r\n        scene = new THREE.Scene();\r\n  \r\n        // Crear cámara\r\n        camera = new THREE.PerspectiveCamera(\r\n          75,\r\n          window.innerWidth / window.innerHeight,\r\n          0.1,\r\n          1000\r\n        );\r\n        camera.position.z = 5;\r\n  \r\n        // Crear renderizador\r\n        renderer = new THREE.WebGLRenderer();\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        if (threeContainer.value) {\r\n          threeContainer.value.appendChild(renderer.domElement);\r\n        }\r\n  \r\n        // Crear partículas\r\n        const particlesGeometry = new THREE.BufferGeometry();\r\n        const particlesCount = 10000;\r\n  \r\n        const posArray = new Float32Array(particlesCount * 3);\r\n        for (let i = 0; i < particlesCount * 3; i++) {\r\n          posArray[i] = (Math.random() - 0.5) * 10;\r\n        }\r\n  \r\n        particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));\r\n  \r\n        const particlesMaterial = new THREE.PointsMaterial({\r\n          size: 0.05,\r\n          color: 0x0000ff, // Color azul\r\n        });\r\n  \r\n        const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);\r\n        scene.add(particlesMesh);\r\n  \r\n        // Añadir animación\r\n        animate();\r\n  \r\n        // Ajustar el renderizador al cambiar el tamaño de la ventana\r\n        window.addEventListener('resize', onWindowResize, false);\r\n      };\r\n  \r\n      const animate = () => {\r\n        requestAnimationFrame(animate);\r\n  \r\n        renderer.render(scene, camera);\r\n      };\r\n  \r\n      const onWindowResize = () => {\r\n        camera.aspect = window.innerWidth / window.innerHeight;\r\n        camera.updateProjectionMatrix();\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n      };\r\n  \r\n      return {\r\n        threeContainer,\r\n      };\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .three-container {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: -1;\r\n  }\r\n  </style>\r\n  "],"mappings":";;;;;;AAKE,SAASA,GAAG,EAAEC,SAAQ,QAAS,KAAK;AACpC,OAAO,KAAKC,KAAI,MAAO,OAAO;AAE9B,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,KAAKA,CAAA,EAAG;IACN,MAAMC,cAAa,GAAIL,GAAG,CAAC,IAAI,CAAC;IAChC,IAAIM,KAAK;IACT,IAAIC,MAAM;IACV,IAAIC,QAAQ;IAEZP,SAAS,CAAC,MAAM;MACdQ,SAAS,CAAC,CAAC;IACb,CAAC,CAAC;IAEF,MAAMA,SAAQ,GAAIA,CAAA,KAAM;MACtB;MACAH,KAAI,GAAI,IAAIJ,KAAK,CAACQ,KAAK,CAAC,CAAC;;MAEzB;MACAH,MAAK,GAAI,IAAIL,KAAK,CAACS,iBAAiB,CAClC,EAAE,EACFC,MAAM,CAACC,UAAS,GAAID,MAAM,CAACE,WAAW,EACtC,GAAG,EACH,IACF,CAAC;MACDP,MAAM,CAACQ,QAAQ,CAACC,CAAA,GAAI,CAAC;;MAErB;MACAR,QAAO,GAAI,IAAIN,KAAK,CAACe,aAAa,CAAC,CAAC;MACpCT,QAAQ,CAACU,OAAO,CAACN,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;MACvD,IAAIT,cAAc,CAACc,KAAK,EAAE;QACxBd,cAAc,CAACc,KAAK,CAACC,WAAW,CAACZ,QAAQ,CAACa,UAAU,CAAC;MACvD;;MAEA;MACA,MAAMC,iBAAgB,GAAI,IAAIpB,KAAK,CAACqB,cAAc,CAAC,CAAC;MACpD,MAAMC,cAAa,GAAI,KAAK;MAE5B,MAAMC,QAAO,GAAI,IAAIC,YAAY,CAACF,cAAa,GAAI,CAAC,CAAC;MACrD,KAAK,IAAIG,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAIH,cAAa,GAAI,CAAC,EAAEG,CAAC,EAAE,EAAE;QAC3CF,QAAQ,CAACE,CAAC,IAAI,CAACC,IAAI,CAACC,MAAM,CAAC,IAAI,GAAG,IAAI,EAAE;MAC1C;MAEAP,iBAAiB,CAACQ,YAAY,CAAC,UAAU,EAAE,IAAI5B,KAAK,CAAC6B,eAAe,CAACN,QAAQ,EAAE,CAAC,CAAC,CAAC;MAElF,MAAMO,iBAAgB,GAAI,IAAI9B,KAAK,CAAC+B,cAAc,CAAC;QACjDC,IAAI,EAAE,IAAI;QACVC,KAAK,EAAE,QAAQ,CAAE;MACnB,CAAC,CAAC;MAEF,MAAMC,aAAY,GAAI,IAAIlC,KAAK,CAACmC,MAAM,CAACf,iBAAiB,EAAEU,iBAAiB,CAAC;MAC5E1B,KAAK,CAACgC,GAAG,CAACF,aAAa,CAAC;;MAExB;MACAG,OAAO,CAAC,CAAC;;MAET;MACA3B,MAAM,CAAC4B,gBAAgB,CAAC,QAAQ,EAAEC,cAAc,EAAE,KAAK,CAAC;IAC1D,CAAC;IAED,MAAMF,OAAM,GAAIA,CAAA,KAAM;MACpBG,qBAAqB,CAACH,OAAO,CAAC;MAE9B/B,QAAQ,CAACmC,MAAM,CAACrC,KAAK,EAAEC,MAAM,CAAC;IAChC,CAAC;IAED,MAAMkC,cAAa,GAAIA,CAAA,KAAM;MAC3BlC,MAAM,CAACqC,MAAK,GAAIhC,MAAM,CAACC,UAAS,GAAID,MAAM,CAACE,WAAW;MACtDP,MAAM,CAACsC,sBAAsB,CAAC,CAAC;MAC/BrC,QAAQ,CAACU,OAAO,CAACN,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;IACzD,CAAC;IAED,OAAO;MACLT;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}