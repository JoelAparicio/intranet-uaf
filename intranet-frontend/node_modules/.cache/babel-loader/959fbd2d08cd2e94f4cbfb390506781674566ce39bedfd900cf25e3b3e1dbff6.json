{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nimport _imports_0 from '../assets/UAF_logo.png';\nconst _withScopeId = n => (_pushScopeId(\"data-v-5dbaf8be\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"scene-container\"\n};\nconst _hoisted_2 = {\n  ref: \"container\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"logo-container\"\n}, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_0,\n  alt: \"UAF Logo\",\n  class: \"logo-overlay\"\n})], -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, null, 512 /* NEED_PATCH */), _hoisted_3]);\n}","map":{"version":3,"names":["_imports_0","class","ref","_createElementVNode","src","alt","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3"],"sources":["C:\\laragon\\www\\intranet-frontend\\src\\components\\ThreeScene.vue"],"sourcesContent":["<template>\r\n    <div class=\"scene-container\">\r\n      <div ref=\"container\"></div>\r\n      <div class=\"logo-container\">\r\n        <img src=\"../assets/UAF_logo.png\" alt=\"UAF Logo\" class=\"logo-overlay\">\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { onMounted, onUnmounted, ref } from 'vue';\r\n  import * as THREE from 'three';\r\n  \r\n  export default {\r\n    setup() {\r\n      const container = ref(null);\r\n      let scene, camera, renderer, particles;\r\n      const clock = new THREE.Clock();\r\n  \r\n      const init = () => {\r\n        scene = new THREE.Scene();\r\n        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n        renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        renderer.setClearColor(0xffffff, 0);\r\n        container.value.appendChild(renderer.domElement);\r\n  \r\n        const particleCount = 20000; // Aumentado a 20,000 partículas\r\n  \r\n        const textureLoader = new THREE.TextureLoader();\r\n        const particleTexture = textureLoader.load('../assets/UAF_logo.png');\r\n  \r\n        const positions = new Float32Array(particleCount * 3);\r\n        const sizes = new Float32Array(particleCount);\r\n  \r\n        for (let i = 0; i < particleCount; i++) {\r\n          positions[i * 3] = (Math.random() - 0.5) * 30; // Aumentado el rango a 30\r\n          positions[i * 3 + 1] = (Math.random() - 0.5) * 30;\r\n          positions[i * 3 + 2] = (Math.random() - 0.5) * 30;\r\n  \r\n          sizes[i] = Math.random() * 0.5 + 0.1; // Ajustado el tamaño de las partículas\r\n        }\r\n  \r\n        const geometry = new THREE.BufferGeometry();\r\n        geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n        geometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\r\n  \r\n        const particleMaterial = new THREE.PointsMaterial({\r\n          size: 1,\r\n          map: particleTexture,\r\n          blending: THREE.AdditiveBlending,\r\n          transparent: true,\r\n          opacity: 0.7,\r\n          depthWrite: false,\r\n          sizeAttenuation: true\r\n        });\r\n  \r\n        particles = new THREE.Points(geometry, particleMaterial);\r\n        scene.add(particles);\r\n  \r\n        camera.position.z = 15; // Ajustado para ver todas las partículas\r\n      };\r\n  \r\n      const animate = () => {\r\n        requestAnimationFrame(animate);\r\n        const time = clock.getElapsedTime();\r\n        \r\n        if (particles) {\r\n          particles.rotation.x = time * 0.02;\r\n          particles.rotation.y = time * 0.03;\r\n  \r\n          const positions = particles.geometry.attributes.position.array;\r\n          const sizes = particles.geometry.attributes.size.array;\r\n  \r\n          for (let i = 0; i < positions.length; i += 3) {\r\n            const scale = Math.sin(time + positions[i] * 0.5) * 0.3 + 0.7;\r\n            sizes[i / 3] = (Math.random() * 0.5 + 0.1) * scale;\r\n  \r\n            positions[i] += Math.sin(time * 0.7 + positions[i + 1]) * 0.01;\r\n            positions[i + 1] += Math.cos(time * 0.8 + positions[i]) * 0.01;\r\n            positions[i + 2] += Math.sin(time * 0.9 + positions[i + 2]) * 0.01;\r\n          }\r\n  \r\n          particles.geometry.attributes.position.needsUpdate = true;\r\n          particles.geometry.attributes.size.needsUpdate = true;\r\n        }\r\n  \r\n        renderer.render(scene, camera);\r\n      };\r\n  \r\n      const handleResize = () => {\r\n        camera.aspect = window.innerWidth / window.innerHeight;\r\n        camera.updateProjectionMatrix();\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n      };\r\n  \r\n      onMounted(() => {\r\n        init();\r\n        animate();\r\n        window.addEventListener('resize', handleResize);\r\n      });\r\n  \r\n      onUnmounted(() => {\r\n        if (renderer) {\r\n          renderer.dispose();\r\n        }\r\n        window.removeEventListener('resize', handleResize);\r\n      });\r\n  \r\n      return { container };\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .scene-container {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: -1;\r\n  }\r\n  \r\n  .logo-container {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    z-index: 1;\r\n  }\r\n  \r\n  .logo-overlay {\r\n    max-width: 500px;\r\n    width: 80%;\r\n    height: auto;\r\n    filter: drop-shadow(0 0 15px rgba(255, 255, 255, 0.8));\r\n    animation: pulse 3s infinite;\r\n  }\r\n  \r\n  @keyframes pulse {\r\n    0% {\r\n      transform: scale(1);\r\n      opacity: 1;\r\n    }\r\n    50% {\r\n      transform: scale(1.03);\r\n      opacity: 0.9;\r\n    }\r\n    100% {\r\n      transform: scale(1);\r\n      opacity: 1;\r\n    }\r\n  }\r\n  </style>"],"mappings":";OAIaA,UAA4B;;;EAHhCC,KAAK,EAAC;AAAiB;;EACrBC,GAAG,EAAC;AAAW;gEACpBC,mBAAA,CAEM;EAFDF,KAAK,EAAC;AAAgB,I,aACzBE,mBAAA,CAAsE;EAAjEC,GAA4B,EAA5BJ,UAA4B;EAACK,GAAG,EAAC,UAAU;EAACJ,KAAK,EAAC;;;uBAH3DK,mBAAA,CAKM,OALNC,UAKM,GAJJJ,mBAAA,CAA2B,OAA3BK,UAA2B,+BAC3BC,UAEM,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}