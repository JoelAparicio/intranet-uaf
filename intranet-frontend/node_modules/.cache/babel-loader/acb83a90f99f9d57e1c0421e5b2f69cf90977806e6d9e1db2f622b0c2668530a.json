{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from 'axios';\n\n// Configuración de cache (5 minutos por defecto)\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutos en milisegundos\n\nexport default createStore({\n  state: {\n    // Auth existente\n    authToken: localStorage.getItem('auth_token') || '',\n    authStatus: '',\n    registerStatus: '',\n    // Cache de datos de la aplicación\n    userProfile: null,\n    tiposSolicitudes: [],\n    historialSolicitudes: [],\n    // Control de cache y loading\n    dataTimestamps: {\n      userProfile: null,\n      tiposSolicitudes: null,\n      historialSolicitudes: null\n    },\n    loadingStates: {\n      userProfile: false,\n      tiposSolicitudes: false,\n      historialSolicitudes: false,\n      appData: false\n    }\n  },\n  mutations: {\n    // Auth mutations existentes\n    auth_request(state) {\n      state.authStatus = 'loading';\n    },\n    auth_success(state, token) {\n      state.authStatus = 'success';\n      state.authToken = token;\n    },\n    auth_error(state) {\n      state.authStatus = 'error';\n    },\n    logout(state) {\n      state.authStatus = '';\n      state.authToken = '';\n      // Limpiar cache al hacer logout\n      state.userProfile = null;\n      state.tiposSolicitudes = [];\n      state.historialSolicitudes = [];\n      state.dataTimestamps = {\n        userProfile: null,\n        tiposSolicitudes: null,\n        historialSolicitudes: null\n      };\n    },\n    register_request(state) {\n      state.registerStatus = 'loading';\n    },\n    register_success(state) {\n      state.registerStatus = 'success';\n    },\n    register_error(state) {\n      state.registerStatus = 'error';\n    },\n    // Nuevas mutations para cache de datos\n    SET_USER_PROFILE(state, profile) {\n      state.userProfile = profile;\n      state.dataTimestamps.userProfile = Date.now();\n    },\n    SET_TIPOS_SOLICITUDES(state, tipos) {\n      state.tiposSolicitudes = tipos;\n      state.dataTimestamps.tiposSolicitudes = Date.now();\n    },\n    SET_HISTORIAL_SOLICITUDES(state, historial) {\n      state.historialSolicitudes = historial;\n      state.dataTimestamps.historialSolicitudes = Date.now();\n    },\n    // Loading states\n    SET_LOADING(state, {\n      key,\n      status\n    }) {\n      state.loadingStates[key] = status;\n    },\n    // Invalidar cache específico\n    INVALIDATE_CACHE(state, key) {\n      state.dataTimestamps[key] = null;\n      if (key === 'userProfile') state.userProfile = null;\n      if (key === 'tiposSolicitudes') state.tiposSolicitudes = [];\n      if (key === 'historialSolicitudes') state.historialSolicitudes = [];\n    },\n    // Limpiar todo el cache\n    CLEAR_ALL_CACHE(state) {\n      state.userProfile = null;\n      state.tiposSolicitudes = [];\n      state.historialSolicitudes = [];\n      state.dataTimestamps = {\n        userProfile: null,\n        tiposSolicitudes: null,\n        historialSolicitudes: null\n      };\n    }\n  },\n  actions: {\n    // Auth actions existentes\n    async login({\n      commit\n    }, user) {\n      commit('auth_request');\n      try {\n        const response = await axios.post('http://localhost:8000/api/login', user);\n        const token = response.data.token;\n        localStorage.setItem('auth_token', token);\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        commit('auth_success', token);\n        return response;\n      } catch (error) {\n        commit('auth_error');\n        localStorage.removeItem('auth_token');\n        throw error;\n      }\n    },\n    async register({\n      commit\n    }, user) {\n      commit('register_request');\n      try {\n        const response = await axios.post('http://localhost:8000/api/register', user);\n        commit('register_success');\n        return response;\n      } catch (error) {\n        commit('register_error');\n        throw error;\n      }\n    },\n    logout({\n      commit\n    }) {\n      return new Promise(resolve => {\n        commit('logout');\n        localStorage.removeItem('auth_token');\n        delete axios.defaults.headers.common['Authorization'];\n        resolve();\n      });\n    },\n    // Nuevas actions para cache de datos\n    async fetchUserProfile({\n      commit,\n      getters\n    }) {\n      // Si ya tenemos datos frescos, no recargar\n      if (getters.isCacheValid('userProfile')) {\n        return getters.userProfile;\n      }\n      commit('SET_LOADING', {\n        key: 'userProfile',\n        status: true\n      });\n      try {\n        const token = localStorage.getItem('auth_token');\n        const response = await axios.get('http://localhost:8000/api/information_user', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (response.data.status) {\n          commit('SET_USER_PROFILE', response.data.data);\n          return response.data.data;\n        } else {\n          throw new Error(response.data.message || 'Error al obtener perfil');\n        }\n      } catch (error) {\n        console.error('Error fetching user profile:', error);\n        throw error;\n      } finally {\n        commit('SET_LOADING', {\n          key: 'userProfile',\n          status: false\n        });\n      }\n    },\n    async fetchTiposSolicitudes({\n      commit,\n      getters\n    }) {\n      if (getters.isCacheValid('tiposSolicitudes')) {\n        return getters.tiposSolicitudes;\n      }\n      commit('SET_LOADING', {\n        key: 'tiposSolicitudes',\n        status: true\n      });\n      try {\n        const token = localStorage.getItem('auth_token');\n        const response = await axios.get('http://localhost:8000/api/listar_solicitud', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        commit('SET_TIPOS_SOLICITUDES', response.data);\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching tipos solicitudes:', error);\n        throw error;\n      } finally {\n        commit('SET_LOADING', {\n          key: 'tiposSolicitudes',\n          status: false\n        });\n      }\n    },\n    async fetchHistorialSolicitudes({\n      commit,\n      getters\n    }) {\n      if (getters.isCacheValid('historialSolicitudes')) {\n        return getters.historialSolicitudes;\n      }\n      commit('SET_LOADING', {\n        key: 'historialSolicitudes',\n        status: true\n      });\n      try {\n        const token = localStorage.getItem('auth_token');\n        const response = await axios.get('http://localhost:8000/api/historial_solicitud', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        commit('SET_HISTORIAL_SOLICITUDES', response.data);\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching historial solicitudes:', error);\n        throw error;\n      } finally {\n        commit('SET_LOADING', {\n          key: 'historialSolicitudes',\n          status: false\n        });\n      }\n    },\n    // Acción principal: cargar todos los datos en paralelo\n    async loadAppData({\n      dispatch,\n      commit\n    }) {\n      commit('SET_LOADING', {\n        key: 'appData',\n        status: true\n      });\n      try {\n        // Ejecutar todas las cargas en paralelo\n        const [userProfile, tiposSolicitudes, historialSolicitudes] = await Promise.all([dispatch('fetchUserProfile'), dispatch('fetchTiposSolicitudes'), dispatch('fetchHistorialSolicitudes')]);\n        return {\n          userProfile,\n          tiposSolicitudes,\n          historialSolicitudes\n        };\n      } catch (error) {\n        console.error('Error loading app data:', error);\n        throw error;\n      } finally {\n        commit('SET_LOADING', {\n          key: 'appData',\n          status: false\n        });\n      }\n    },\n    // Invalidar cache específico\n    invalidateCache({\n      commit\n    }, key) {\n      commit('INVALIDATE_CACHE', key);\n    },\n    // Refrescar datos específicos\n    async refreshUserProfile({\n      dispatch,\n      commit\n    }) {\n      commit('INVALIDATE_CACHE', 'userProfile');\n      return await dispatch('fetchUserProfile');\n    },\n    async refreshTiposSolicitudes({\n      dispatch,\n      commit\n    }) {\n      commit('INVALIDATE_CACHE', 'tiposSolicitudes');\n      return await dispatch('fetchTiposSolicitudes');\n    },\n    async refreshHistorialSolicitudes({\n      dispatch,\n      commit\n    }) {\n      commit('INVALIDATE_CACHE', 'historialSolicitudes');\n      return await dispatch('fetchHistorialSolicitudes');\n    }\n  },\n  getters: {\n    // Auth getters existentes\n    isAuthenticated: state => !!state.authToken,\n    authStatus: state => state.authStatus,\n    registerStatus: state => state.registerStatus,\n    // Nuevos getters para datos cacheados\n    userProfile: state => state.userProfile,\n    tiposSolicitudes: state => state.tiposSolicitudes,\n    historialSolicitudes: state => state.historialSolicitudes,\n    // Loading states\n    isLoading: state => key => state.loadingStates[key] || false,\n    isLoadingAppData: state => state.loadingStates.appData,\n    // Validación de cache\n    isCacheValid: state => key => {\n      const timestamp = state.dataTimestamps[key];\n      if (!timestamp) return false;\n      return Date.now() - timestamp < CACHE_DURATION;\n    },\n    // Getters computados útiles\n    hasCachedData: state => {\n      return !!(state.userProfile && state.tiposSolicitudes.length > 0);\n    },\n    cacheAge: state => key => {\n      const timestamp = state.dataTimestamps[key];\n      if (!timestamp) return null;\n      return Math.floor((Date.now() - timestamp) / 1000); // en segundos\n    }\n  }\n});","map":{"version":3,"names":["createStore","axios","CACHE_DURATION","state","authToken","localStorage","getItem","authStatus","registerStatus","userProfile","tiposSolicitudes","historialSolicitudes","dataTimestamps","loadingStates","appData","mutations","auth_request","auth_success","token","auth_error","logout","register_request","register_success","register_error","SET_USER_PROFILE","profile","Date","now","SET_TIPOS_SOLICITUDES","tipos","SET_HISTORIAL_SOLICITUDES","historial","SET_LOADING","key","status","INVALIDATE_CACHE","CLEAR_ALL_CACHE","actions","login","commit","user","response","post","data","setItem","defaults","headers","common","error","removeItem","register","Promise","resolve","fetchUserProfile","getters","isCacheValid","get","Error","message","console","fetchTiposSolicitudes","fetchHistorialSolicitudes","loadAppData","dispatch","all","invalidateCache","refreshUserProfile","refreshTiposSolicitudes","refreshHistorialSolicitudes","isAuthenticated","isLoading","isLoadingAppData","timestamp","hasCachedData","length","cacheAge","Math","floor"],"sources":["C:/xampp/htdocs/intranet/intranet-frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\nimport axios from 'axios'\n\n// Configuración de cache (5 minutos por defecto)\nconst CACHE_DURATION = 5 * 60 * 1000 // 5 minutos en milisegundos\n\nexport default createStore({\n  state: {\n    // Auth existente\n    authToken: localStorage.getItem('auth_token') || '',\n    authStatus: '',\n    registerStatus: '',\n\n    // Cache de datos de la aplicación\n    userProfile: null,\n    tiposSolicitudes: [],\n    historialSolicitudes: [],\n\n    // Control de cache y loading\n    dataTimestamps: {\n      userProfile: null,\n      tiposSolicitudes: null,\n      historialSolicitudes: null\n    },\n    loadingStates: {\n      userProfile: false,\n      tiposSolicitudes: false,\n      historialSolicitudes: false,\n      appData: false\n    }\n  },\n\n  mutations: {\n    // Auth mutations existentes\n    auth_request(state) {\n      state.authStatus = 'loading'\n    },\n    auth_success(state, token) {\n      state.authStatus = 'success'\n      state.authToken = token\n    },\n    auth_error(state) {\n      state.authStatus = 'error'\n    },\n    logout(state) {\n      state.authStatus = ''\n      state.authToken = ''\n      // Limpiar cache al hacer logout\n      state.userProfile = null\n      state.tiposSolicitudes = []\n      state.historialSolicitudes = []\n      state.dataTimestamps = {\n        userProfile: null,\n        tiposSolicitudes: null,\n        historialSolicitudes: null\n      }\n    },\n    register_request(state) {\n      state.registerStatus = 'loading'\n    },\n    register_success(state) {\n      state.registerStatus = 'success'\n    },\n    register_error(state) {\n      state.registerStatus = 'error'\n    },\n\n    // Nuevas mutations para cache de datos\n    SET_USER_PROFILE(state, profile) {\n      state.userProfile = profile\n      state.dataTimestamps.userProfile = Date.now()\n    },\n    SET_TIPOS_SOLICITUDES(state, tipos) {\n      state.tiposSolicitudes = tipos\n      state.dataTimestamps.tiposSolicitudes = Date.now()\n    },\n    SET_HISTORIAL_SOLICITUDES(state, historial) {\n      state.historialSolicitudes = historial\n      state.dataTimestamps.historialSolicitudes = Date.now()\n    },\n\n    // Loading states\n    SET_LOADING(state, { key, status }) {\n      state.loadingStates[key] = status\n    },\n\n    // Invalidar cache específico\n    INVALIDATE_CACHE(state, key) {\n      state.dataTimestamps[key] = null\n      if (key === 'userProfile') state.userProfile = null\n      if (key === 'tiposSolicitudes') state.tiposSolicitudes = []\n      if (key === 'historialSolicitudes') state.historialSolicitudes = []\n    },\n\n    // Limpiar todo el cache\n    CLEAR_ALL_CACHE(state) {\n      state.userProfile = null\n      state.tiposSolicitudes = []\n      state.historialSolicitudes = []\n      state.dataTimestamps = {\n        userProfile: null,\n        tiposSolicitudes: null,\n        historialSolicitudes: null\n      }\n    }\n  },\n\n  actions: {\n    // Auth actions existentes\n    async login({ commit }, user) {\n      commit('auth_request')\n      try {\n        const response = await axios.post('http://localhost:8000/api/login', user)\n        const token = response.data.token\n        localStorage.setItem('auth_token', token)\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`\n        commit('auth_success', token)\n        return response\n      } catch (error) {\n        commit('auth_error')\n        localStorage.removeItem('auth_token')\n        throw error\n      }\n    },\n\n    async register({ commit }, user) {\n      commit('register_request')\n      try {\n        const response = await axios.post('http://localhost:8000/api/register', user)\n        commit('register_success')\n        return response\n      } catch (error) {\n        commit('register_error')\n        throw error\n      }\n    },\n\n    logout({ commit }) {\n      return new Promise((resolve) => {\n        commit('logout')\n        localStorage.removeItem('auth_token')\n        delete axios.defaults.headers.common['Authorization']\n        resolve()\n      })\n    },\n\n    // Nuevas actions para cache de datos\n    async fetchUserProfile({ commit, getters }) {\n      // Si ya tenemos datos frescos, no recargar\n      if (getters.isCacheValid('userProfile')) {\n        return getters.userProfile\n      }\n\n      commit('SET_LOADING', { key: 'userProfile', status: true })\n\n      try {\n        const token = localStorage.getItem('auth_token')\n        const response = await axios.get('http://localhost:8000/api/information_user', {\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n\n        if (response.data.status) {\n          commit('SET_USER_PROFILE', response.data.data)\n          return response.data.data\n        } else {\n          throw new Error(response.data.message || 'Error al obtener perfil')\n        }\n      } catch (error) {\n        console.error('Error fetching user profile:', error)\n        throw error\n      } finally {\n        commit('SET_LOADING', { key: 'userProfile', status: false })\n      }\n    },\n\n    async fetchTiposSolicitudes({ commit, getters }) {\n      if (getters.isCacheValid('tiposSolicitudes')) {\n        return getters.tiposSolicitudes\n      }\n\n      commit('SET_LOADING', { key: 'tiposSolicitudes', status: true })\n\n      try {\n        const token = localStorage.getItem('auth_token')\n        const response = await axios.get('http://localhost:8000/api/listar_solicitud', {\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n\n        commit('SET_TIPOS_SOLICITUDES', response.data)\n        return response.data\n      } catch (error) {\n        console.error('Error fetching tipos solicitudes:', error)\n        throw error\n      } finally {\n        commit('SET_LOADING', { key: 'tiposSolicitudes', status: false })\n      }\n    },\n\n    async fetchHistorialSolicitudes({ commit, getters }) {\n      if (getters.isCacheValid('historialSolicitudes')) {\n        return getters.historialSolicitudes\n      }\n\n      commit('SET_LOADING', { key: 'historialSolicitudes', status: true })\n\n      try {\n        const token = localStorage.getItem('auth_token')\n        const response = await axios.get('http://localhost:8000/api/historial_solicitud', {\n          headers: { 'Authorization': `Bearer ${token}` }\n        })\n\n        commit('SET_HISTORIAL_SOLICITUDES', response.data)\n        return response.data\n      } catch (error) {\n        console.error('Error fetching historial solicitudes:', error)\n        throw error\n      } finally {\n        commit('SET_LOADING', { key: 'historialSolicitudes', status: false })\n      }\n    },\n\n    // Acción principal: cargar todos los datos en paralelo\n    async loadAppData({ dispatch, commit }) {\n      commit('SET_LOADING', { key: 'appData', status: true })\n\n      try {\n        // Ejecutar todas las cargas en paralelo\n        const [userProfile, tiposSolicitudes, historialSolicitudes] = await Promise.all([\n          dispatch('fetchUserProfile'),\n          dispatch('fetchTiposSolicitudes'),\n          dispatch('fetchHistorialSolicitudes')\n        ])\n\n        return {\n          userProfile,\n          tiposSolicitudes,\n          historialSolicitudes\n        }\n      } catch (error) {\n        console.error('Error loading app data:', error)\n        throw error\n      } finally {\n        commit('SET_LOADING', { key: 'appData', status: false })\n      }\n    },\n\n    // Invalidar cache específico\n    invalidateCache({ commit }, key) {\n      commit('INVALIDATE_CACHE', key)\n    },\n\n    // Refrescar datos específicos\n    async refreshUserProfile({ dispatch, commit }) {\n      commit('INVALIDATE_CACHE', 'userProfile')\n      return await dispatch('fetchUserProfile')\n    },\n\n    async refreshTiposSolicitudes({ dispatch, commit }) {\n      commit('INVALIDATE_CACHE', 'tiposSolicitudes')\n      return await dispatch('fetchTiposSolicitudes')\n    },\n\n    async refreshHistorialSolicitudes({ dispatch, commit }) {\n      commit('INVALIDATE_CACHE', 'historialSolicitudes')\n      return await dispatch('fetchHistorialSolicitudes')\n    }\n  },\n\n  getters: {\n    // Auth getters existentes\n    isAuthenticated: state => !!state.authToken,\n    authStatus: state => state.authStatus,\n    registerStatus: state => state.registerStatus,\n\n    // Nuevos getters para datos cacheados\n    userProfile: state => state.userProfile,\n    tiposSolicitudes: state => state.tiposSolicitudes,\n    historialSolicitudes: state => state.historialSolicitudes,\n\n    // Loading states\n    isLoading: state => key => state.loadingStates[key] || false,\n    isLoadingAppData: state => state.loadingStates.appData,\n\n    // Validación de cache\n    isCacheValid: state => key => {\n      const timestamp = state.dataTimestamps[key]\n      if (!timestamp) return false\n      return (Date.now() - timestamp) < CACHE_DURATION\n    },\n\n    // Getters computados útiles\n    hasCachedData: state => {\n      return !!(state.userProfile && state.tiposSolicitudes.length > 0)\n    },\n\n    cacheAge: state => key => {\n      const timestamp = state.dataTimestamps[key]\n      if (!timestamp) return null\n      return Math.floor((Date.now() - timestamp) / 1000) // en segundos\n    }\n  }\n})"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}