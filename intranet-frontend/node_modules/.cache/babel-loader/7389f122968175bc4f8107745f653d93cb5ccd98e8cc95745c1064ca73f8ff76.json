{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { onMounted, onUnmounted, ref } from 'vue';\nimport * as THREE from 'three';\nexport default {\n  setup() {\n    const container = ref(null);\n    let scene, camera, renderer, particles;\n    const clock = new THREE.Clock();\n    const init = () => {\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.setClearColor(0xffffff, 0); // Fondo transparente\n      container.value.appendChild(renderer.domElement);\n\n      // Crear sistema de partículas\n      const particleCount = 2000;\n      const positions = new Float32Array(particleCount * 3);\n      const sizes = new Float32Array(particleCount);\n      for (let i = 0; i < particleCount; i++) {\n        positions[i * 3] = (Math.random() - 0.5) * 10;\n        positions[i * 3 + 1] = (Math.random() - 0.5) * 10;\n        positions[i * 3 + 2] = (Math.random() - 0.5) * 10;\n        sizes[i] = Math.random() * 0.01 + 0.002; // Partículas muy pequeñas\n      }\n      const geometry = new THREE.BufferGeometry();\n      geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n      geometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\n      const particleMaterial = new THREE.PointsMaterial({\n        color: 0x024a9f,\n        size: 0.01,\n        sizeAttenuation: true\n      });\n      particles = new THREE.Points(geometry, particleMaterial);\n      scene.add(particles);\n      camera.position.z = 5;\n    };\n    const animate = () => {\n      requestAnimationFrame(animate);\n      const time = clock.getElapsedTime();\n      if (particles) {\n        particles.rotation.x = time * 0.01;\n        particles.rotation.y = time * 0.02;\n        const positions = particles.geometry.attributes.position.array;\n        for (let i = 0; i < positions.length; i += 3) {\n          positions[i] += Math.sin(time + positions[i + 1]) * 0.001;\n          positions[i + 1] += Math.cos(time + positions[i]) * 0.001;\n        }\n        particles.geometry.attributes.position.needsUpdate = true;\n      }\n      renderer.render(scene, camera);\n    };\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    onMounted(() => {\n      init();\n      animate();\n      window.addEventListener('resize', handleResize);\n    });\n    onUnmounted(() => {\n      if (renderer) {\n        renderer.dispose();\n      }\n      window.removeEventListener('resize', handleResize);\n    });\n    return {\n      container\n    };\n  }\n};","map":{"version":3,"names":["onMounted","onUnmounted","ref","THREE","setup","container","scene","camera","renderer","particles","clock","Clock","init","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","antialias","alpha","setSize","setClearColor","value","appendChild","domElement","particleCount","positions","Float32Array","sizes","i","Math","random","geometry","BufferGeometry","setAttribute","BufferAttribute","particleMaterial","PointsMaterial","color","size","sizeAttenuation","Points","add","position","z","animate","requestAnimationFrame","time","getElapsedTime","rotation","x","y","attributes","array","length","sin","cos","needsUpdate","render","handleResize","aspect","updateProjectionMatrix","addEventListener","dispose","removeEventListener"],"sources":["C:\\laragon\\www\\intranet-frontend\\src\\components\\ThreeScene.vue"],"sourcesContent":["<template>\r\n    <div class=\"scene-container\">\r\n      <div ref=\"container\"></div>\r\n      <img src=\"@/assets/UAF_logo.png\" alt=\"UAF Logo\" class=\"logo-overlay\">\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { onMounted, onUnmounted, ref } from 'vue';\r\n  import * as THREE from 'three';\r\n  \r\n  export default {\r\n    setup() {\r\n      const container = ref(null);\r\n      let scene, camera, renderer, particles;\r\n      const clock = new THREE.Clock();\r\n  \r\n      const init = () => {\r\n        scene = new THREE.Scene();\r\n        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n        renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        renderer.setClearColor(0xffffff, 0); // Fondo transparente\r\n        container.value.appendChild(renderer.domElement);\r\n  \r\n        // Crear sistema de partículas\r\n        const particleCount = 2000;\r\n        const positions = new Float32Array(particleCount * 3);\r\n        const sizes = new Float32Array(particleCount);\r\n  \r\n        for (let i = 0; i < particleCount; i++) {\r\n          positions[i * 3] = (Math.random() - 0.5) * 10;\r\n          positions[i * 3 + 1] = (Math.random() - 0.5) * 10;\r\n          positions[i * 3 + 2] = (Math.random() - 0.5) * 10;\r\n          sizes[i] = Math.random() * 0.01 + 0.002; // Partículas muy pequeñas\r\n        }\r\n  \r\n        const geometry = new THREE.BufferGeometry();\r\n        geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n        geometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\r\n  \r\n        const particleMaterial = new THREE.PointsMaterial({\r\n          color: 0x024a9f,\r\n          size: 0.01,\r\n          sizeAttenuation: true\r\n        });\r\n  \r\n        particles = new THREE.Points(geometry, particleMaterial);\r\n        scene.add(particles);\r\n  \r\n        camera.position.z = 5;\r\n      };\r\n  \r\n      const animate = () => {\r\n        requestAnimationFrame(animate);\r\n        const time = clock.getElapsedTime();\r\n        \r\n        if (particles) {\r\n          particles.rotation.x = time * 0.01;\r\n          particles.rotation.y = time * 0.02;\r\n  \r\n          const positions = particles.geometry.attributes.position.array;\r\n          for (let i = 0; i < positions.length; i += 3) {\r\n            positions[i] += Math.sin(time + positions[i + 1]) * 0.001;\r\n            positions[i + 1] += Math.cos(time + positions[i]) * 0.001;\r\n          }\r\n          particles.geometry.attributes.position.needsUpdate = true;\r\n        }\r\n  \r\n        renderer.render(scene, camera);\r\n      };\r\n  \r\n      const handleResize = () => {\r\n        camera.aspect = window.innerWidth / window.innerHeight;\r\n        camera.updateProjectionMatrix();\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n      };\r\n  \r\n      onMounted(() => {\r\n        init();\r\n        animate();\r\n        window.addEventListener('resize', handleResize);\r\n      });\r\n  \r\n      onUnmounted(() => {\r\n        if (renderer) {\r\n          renderer.dispose();\r\n        }\r\n        window.removeEventListener('resize', handleResize);\r\n      });\r\n  \r\n      return { container };\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .scene-container {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: -1;\r\n  }\r\n  \r\n  .logo-overlay {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    max-width: 200px; /* Ajusta según sea necesario */\r\n    z-index: 1;\r\n  }\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}