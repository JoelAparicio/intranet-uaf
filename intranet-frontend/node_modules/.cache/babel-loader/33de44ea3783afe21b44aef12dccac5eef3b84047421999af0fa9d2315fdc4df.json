{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_FullCalendar = _resolveComponent(\"FullCalendar\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_FullCalendar, {\n    events: _ctx.events,\n    options: _ctx.calendarOptions\n  }, null, 8 /* PROPS */, [\"events\", \"options\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_FullCalendar","events","_ctx","options","calendarOptions"],"sources":["C:\\laragon\\www\\intranet-frontend\\src\\components\\Calendario_Birth.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <FullCalendar\r\n        :events=\"events\"\r\n        :options=\"calendarOptions\"\r\n      />\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\nimport { defineComponent } from 'vue'\r\nimport FullCalendar from '@fullcalendar/vue3'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\nimport { INITIAL_EVENTS, createEventId } from './event-utils'\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    FullCalendar,\r\n  },\r\n  data() {\r\n    return {\r\n      calendarOptions: {\r\n        plugins: [\r\n          dayGridPlugin,\r\n          timeGridPlugin,\r\n          interactionPlugin // needed for dateClick\r\n        ],\r\n        headerToolbar: {\r\n          left: 'prev,next today',\r\n          center: 'title',\r\n          right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n        },\r\n        initialView: 'dayGridMonth',\r\n        initialEvents: INITIAL_EVENTS, // alternatively, use the `events` setting to fetch from a feed\r\n        editable: true,\r\n        selectable: true,\r\n        selectMirror: true,\r\n        dayMaxEvents: true,\r\n        weekends: true,\r\n        select: this.handleDateSelect,\r\n        eventClick: this.handleEventClick,\r\n        eventsSet: this.handleEvents\r\n        /* you can update a remote database when these fire:\r\n        eventAdd:\r\n        eventChange:\r\n        eventRemove:\r\n        */\r\n      },\r\n      currentEvents: [],\r\n    }\r\n  },\r\n  methods: {\r\n    handleWeekendsToggle() {\r\n      this.calendarOptions.weekends = !this.calendarOptions.weekends // update a property\r\n    },\r\n    handleDateSelect(selectInfo) {\r\n      let title = prompt('Please enter a new title for your event')\r\n      let calendarApi = selectInfo.view.calendar\r\n\r\n      calendarApi.unselect() // clear date selection\r\n\r\n      if (title) {\r\n        calendarApi.addEvent({\r\n          id: createEventId(),\r\n          title,\r\n          start: selectInfo.startStr,\r\n          end: selectInfo.endStr,\r\n          allDay: selectInfo.allDay\r\n        })\r\n      }\r\n    },\r\n    handleEventClick(clickInfo) {\r\n      if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\r\n        clickInfo.event.remove()\r\n      }\r\n    },\r\n    handleEvents(events) {\r\n      this.currentEvents = events\r\n    },\r\n  }\r\n})\r\n\r\n</script>\r\n  \r\n  <style>\r\n  @import '@fullcalendar/core/main.css';\r\n  @import '@fullcalendar/daygrid/main.css';\r\n  </style>\r\n  "],"mappings":";;;uBACIA,mBAAA,CAKM,cAJJC,YAAA,CAGEC,uBAAA;IAFCC,MAAM,EAAEC,IAAA,CAAAD,MAAM;IACdE,OAAO,EAAED,IAAA,CAAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}