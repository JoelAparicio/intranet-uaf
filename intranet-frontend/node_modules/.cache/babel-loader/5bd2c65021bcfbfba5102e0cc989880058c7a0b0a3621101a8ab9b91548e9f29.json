{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { onMounted, onUnmounted, ref } from 'vue';\nimport * as THREE from 'three';\nexport default {\n  setup() {\n    const container = ref(null);\n    let scene, camera, renderer, particles;\n    const clock = new THREE.Clock();\n    const init = () => {\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      container.value.appendChild(renderer.domElement);\n\n      // Cargar textura del logo\n      const loader = new THREE.TextureLoader();\n      const logoTexture = loader.load('/assets/UAF_logo.png');\n      const logoMaterial = new THREE.SpriteMaterial({\n        map: logoTexture\n      });\n      const logo = new THREE.Sprite(logoMaterial);\n      logo.scale.set(2, 2, 1);\n      scene.add(logo);\n\n      // Crear sistema de partículas\n      const particleCount = 5000;\n      const positions = new Float32Array(particleCount * 3);\n      const colors = new Float32Array(particleCount * 3);\n      const sizes = new Float32Array(particleCount);\n      const color = new THREE.Color(0x024a9f);\n      for (let i = 0; i < particleCount; i++) {\n        positions[i * 3] = (Math.random() - 0.5) * 10;\n        positions[i * 3 + 1] = (Math.random() - 0.5) * 10;\n        positions[i * 3 + 2] = (Math.random() - 0.5) * 10;\n        color.toArray(colors, i * 3);\n        sizes[i] = Math.random() * 0.1 + 0.05;\n      }\n      const geometry = new THREE.BufferGeometry();\n      geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n      geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n      geometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\n      const particleMaterial = new THREE.ShaderMaterial({\n        uniforms: {\n          time: {\n            value: 0\n          },\n          pointTexture: {\n            value: new THREE.TextureLoader().load('/assets/particle.png')\n          }\n        },\n        vertexShader: `\n            uniform float time;\n            attribute float size;\n            varying vec3 vColor;\n            void main() {\n              vColor = color;\n              vec3 pos = position;\n              pos.x += sin(time + position.y) * 0.1;\n              pos.y += cos(time + position.x) * 0.1;\n              vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);\n              gl_PointSize = size * (300.0 / -mvPosition.z);\n              gl_Position = projectionMatrix * mvPosition;\n            }\n          `,\n        fragmentShader: `\n            uniform sampler2D pointTexture;\n            varying vec3 vColor;\n            void main() {\n              gl_FragColor = vec4(vColor, 1.0) * texture2D(pointTexture, gl_PointCoord);\n            }\n          `,\n        blending: THREE.AdditiveBlending,\n        depthTest: false,\n        transparent: true,\n        vertexColors: true\n      });\n      particles = new THREE.Points(geometry, particleMaterial);\n      scene.add(particles);\n      camera.position.z = 5;\n    };\n    const animate = () => {\n      requestAnimationFrame(animate);\n      const time = clock.getElapsedTime();\n      if (particles) {\n        particles.material.uniforms.time.value = time;\n        particles.rotation.x = time * 0.05;\n        particles.rotation.y = time * 0.1;\n      }\n      renderer.render(scene, camera);\n    };\n    onMounted(() => {\n      init();\n      animate();\n    });\n    onUnmounted(() => {\n      if (renderer) {\n        renderer.dispose();\n      }\n    });\n    return {\n      container\n    };\n  }\n};","map":{"version":3,"names":["onMounted","onUnmounted","ref","THREE","setup","container","scene","camera","renderer","particles","clock","Clock","init","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","antialias","setSize","value","appendChild","domElement","loader","TextureLoader","logoTexture","load","logoMaterial","SpriteMaterial","map","logo","Sprite","scale","set","add","particleCount","positions","Float32Array","colors","sizes","color","Color","i","Math","random","toArray","geometry","BufferGeometry","setAttribute","BufferAttribute","particleMaterial","ShaderMaterial","uniforms","time","pointTexture","vertexShader","fragmentShader","blending","AdditiveBlending","depthTest","transparent","vertexColors","Points","position","z","animate","requestAnimationFrame","getElapsedTime","material","rotation","x","y","render","dispose"],"sources":["C:\\laragon\\www\\intranet-frontend\\src\\components\\ThreeScene.vue"],"sourcesContent":["<template>\r\n    <div ref=\"container\"></div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { onMounted, onUnmounted, ref } from 'vue';\r\n  import * as THREE from 'three';\r\n  \r\n  export default {\r\n    setup() {\r\n      const container = ref(null);\r\n      let scene, camera, renderer, particles;\r\n      const clock = new THREE.Clock();\r\n  \r\n      const init = () => {\r\n        scene = new THREE.Scene();\r\n        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n        renderer = new THREE.WebGLRenderer({ antialias: true });\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        container.value.appendChild(renderer.domElement);\r\n  \r\n        // Cargar textura del logo\r\n        const loader = new THREE.TextureLoader();\r\n        const logoTexture = loader.load('/assets/UAF_logo.png');\r\n        const logoMaterial = new THREE.SpriteMaterial({ map: logoTexture });\r\n        const logo = new THREE.Sprite(logoMaterial);\r\n        logo.scale.set(2, 2, 1);\r\n        scene.add(logo);\r\n  \r\n        // Crear sistema de partículas\r\n        const particleCount = 5000;\r\n        const positions = new Float32Array(particleCount * 3);\r\n        const colors = new Float32Array(particleCount * 3);\r\n        const sizes = new Float32Array(particleCount);\r\n  \r\n        const color = new THREE.Color(0x024a9f);\r\n  \r\n        for (let i = 0; i < particleCount; i++) {\r\n          positions[i * 3] = (Math.random() - 0.5) * 10;\r\n          positions[i * 3 + 1] = (Math.random() - 0.5) * 10;\r\n          positions[i * 3 + 2] = (Math.random() - 0.5) * 10;\r\n  \r\n          color.toArray(colors, i * 3);\r\n  \r\n          sizes[i] = Math.random() * 0.1 + 0.05;\r\n        }\r\n  \r\n        const geometry = new THREE.BufferGeometry();\r\n        geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n        geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\r\n        geometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\r\n  \r\n        const particleMaterial = new THREE.ShaderMaterial({\r\n          uniforms: {\r\n            time: { value: 0 },\r\n            pointTexture: { value: new THREE.TextureLoader().load('/assets/particle.png') }\r\n          },\r\n          vertexShader: `\r\n            uniform float time;\r\n            attribute float size;\r\n            varying vec3 vColor;\r\n            void main() {\r\n              vColor = color;\r\n              vec3 pos = position;\r\n              pos.x += sin(time + position.y) * 0.1;\r\n              pos.y += cos(time + position.x) * 0.1;\r\n              vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);\r\n              gl_PointSize = size * (300.0 / -mvPosition.z);\r\n              gl_Position = projectionMatrix * mvPosition;\r\n            }\r\n          `,\r\n          fragmentShader: `\r\n            uniform sampler2D pointTexture;\r\n            varying vec3 vColor;\r\n            void main() {\r\n              gl_FragColor = vec4(vColor, 1.0) * texture2D(pointTexture, gl_PointCoord);\r\n            }\r\n          `,\r\n          blending: THREE.AdditiveBlending,\r\n          depthTest: false,\r\n          transparent: true,\r\n          vertexColors: true\r\n        });\r\n  \r\n        particles = new THREE.Points(geometry, particleMaterial);\r\n        scene.add(particles);\r\n  \r\n        camera.position.z = 5;\r\n      };\r\n  \r\n      const animate = () => {\r\n        requestAnimationFrame(animate);\r\n        const time = clock.getElapsedTime();\r\n        \r\n        if (particles) {\r\n          particles.material.uniforms.time.value = time;\r\n          particles.rotation.x = time * 0.05;\r\n          particles.rotation.y = time * 0.1;\r\n        }\r\n  \r\n        renderer.render(scene, camera);\r\n      };\r\n  \r\n      onMounted(() => {\r\n        init();\r\n        animate();\r\n      });\r\n  \r\n      onUnmounted(() => {\r\n        if (renderer) {\r\n          renderer.dispose();\r\n        }\r\n      });\r\n  \r\n      return { container };\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  div {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}