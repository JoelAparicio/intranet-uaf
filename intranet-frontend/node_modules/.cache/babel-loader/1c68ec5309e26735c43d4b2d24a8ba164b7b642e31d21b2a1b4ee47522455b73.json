{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { onMounted, onUnmounted, ref } from 'vue';\nimport * as THREE from 'three';\nexport default {\n  setup() {\n    const container = ref(null);\n    let scene, camera, renderer, particles;\n    const clock = new THREE.Clock();\n    const createCircleTexture = () => {\n      const canvas = document.createElement('canvas');\n      canvas.width = 64;\n      canvas.height = 64;\n      const ctx = canvas.getContext('2d');\n      const gradient = ctx.createRadialGradient(32, 32, 0, 32, 32, 32);\n      gradient.addColorStop(0, 'rgba(255,255,255,1)');\n      gradient.addColorStop(1, 'rgba(255,255,255,0)');\n      ctx.fillStyle = gradient;\n      ctx.fillRect(0, 0, 64, 64);\n      return new THREE.CanvasTexture(canvas);\n    };\n    const init = () => {\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.setClearColor(0xffffff, 0);\n      container.value.appendChild(renderer.domElement);\n      const particleCount = 5000;\n      const positions = new Float32Array(particleCount * 3);\n      const colors = new Float32Array(particleCount * 3);\n      const sizes = new Float32Array(particleCount);\n      const color = new THREE.Color();\n      for (let i = 0; i < particleCount; i++) {\n        positions[i * 3] = (Math.random() - 0.5) * 20;\n        positions[i * 3 + 1] = (Math.random() - 0.5) * 20;\n        positions[i * 3 + 2] = (Math.random() - 0.5) * 20;\n        color.setHSL(Math.random() * 0.1 + 0.6, 0.8, 0.5);\n        colors[i * 3] = color.r;\n        colors[i * 3 + 1] = color.g;\n        colors[i * 3 + 2] = color.b;\n        sizes[i] = Math.random() * 0.2 + 0.05;\n      }\n      const geometry = new THREE.BufferGeometry();\n      geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n      geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n      geometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\n      const particleTexture = createCircleTexture();\n      const particleMaterial = new THREE.PointsMaterial({\n        size: 0.2,\n        map: particleTexture,\n        vertexColors: true,\n        blending: THREE.AdditiveBlending,\n        transparent: true,\n        opacity: 0.6,\n        depthWrite: false,\n        sizeAttenuation: true\n      });\n      particles = new THREE.Points(geometry, particleMaterial);\n      scene.add(particles);\n      camera.position.z = 10;\n    };\n    const animate = () => {\n      requestAnimationFrame(animate);\n      const time = clock.getElapsedTime();\n      if (particles) {\n        particles.rotation.x = time * 0.03;\n        particles.rotation.y = time * 0.05;\n        const positions = particles.geometry.attributes.position.array;\n        const sizes = particles.geometry.attributes.size.array;\n        for (let i = 0; i < positions.length; i += 3) {\n          const scale = Math.sin(time + positions[i] * 0.5) * 0.5 + 0.5;\n          sizes[i / 3] = (Math.random() * 0.2 + 0.05) * scale;\n          positions[i] += Math.sin(time * 0.7 + positions[i + 1]) * 0.01;\n          positions[i + 1] += Math.cos(time * 0.8 + positions[i]) * 0.01;\n          positions[i + 2] += Math.sin(time * 0.9 + positions[i + 2]) * 0.01;\n        }\n        particles.geometry.attributes.position.needsUpdate = true;\n        particles.geometry.attributes.size.needsUpdate = true;\n      }\n      renderer.render(scene, camera);\n    };\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    onMounted(() => {\n      init();\n      animate();\n      window.addEventListener('resize', handleResize);\n    });\n    onUnmounted(() => {\n      if (renderer) {\n        renderer.dispose();\n      }\n      window.removeEventListener('resize', handleResize);\n    });\n    return {\n      container\n    };\n  }\n};","map":{"version":3,"names":["onMounted","onUnmounted","ref","THREE","setup","container","scene","camera","renderer","particles","clock","Clock","createCircleTexture","canvas","document","createElement","width","height","ctx","getContext","gradient","createRadialGradient","addColorStop","fillStyle","fillRect","CanvasTexture","init","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","antialias","alpha","setSize","setClearColor","value","appendChild","domElement","particleCount","positions","Float32Array","colors","sizes","color","Color","i","Math","random","setHSL","r","g","b","geometry","BufferGeometry","setAttribute","BufferAttribute","particleTexture","particleMaterial","PointsMaterial","size","map","vertexColors","blending","AdditiveBlending","transparent","opacity","depthWrite","sizeAttenuation","Points","add","position","z","animate","requestAnimationFrame","time","getElapsedTime","rotation","x","y","attributes","array","length","scale","sin","cos","needsUpdate","render","handleResize","aspect","updateProjectionMatrix","addEventListener","dispose","removeEventListener"],"sources":["C:\\laragon\\www\\intranet-frontend\\src\\components\\ThreeScene.vue"],"sourcesContent":["<template>\r\n    <div class=\"scene-container\">\r\n      <div ref=\"container\"></div>\r\n      <div class=\"logo-container\">\r\n        <img src=\"@/assets/UAF_logo.png\" alt=\"UAF Logo\" class=\"logo-overlay\">\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { onMounted, onUnmounted, ref } from 'vue';\r\n  import * as THREE from 'three';\r\n  \r\n  export default {\r\n    setup() {\r\n      const container = ref(null);\r\n      let scene, camera, renderer, particles;\r\n      const clock = new THREE.Clock();\r\n  \r\n      const createCircleTexture = () => {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = 64;\r\n        canvas.height = 64;\r\n        const ctx = canvas.getContext('2d');\r\n        const gradient = ctx.createRadialGradient(32, 32, 0, 32, 32, 32);\r\n        gradient.addColorStop(0, 'rgba(255,255,255,1)');\r\n        gradient.addColorStop(1, 'rgba(255,255,255,0)');\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, 64, 64);\r\n        return new THREE.CanvasTexture(canvas);\r\n      };\r\n  \r\n      const init = () => {\r\n        scene = new THREE.Scene();\r\n        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n        renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        renderer.setClearColor(0xffffff, 0);\r\n        container.value.appendChild(renderer.domElement);\r\n  \r\n        const particleCount = 5000;\r\n        const positions = new Float32Array(particleCount * 3);\r\n        const colors = new Float32Array(particleCount * 3);\r\n        const sizes = new Float32Array(particleCount);\r\n  \r\n        const color = new THREE.Color();\r\n  \r\n        for (let i = 0; i < particleCount; i++) {\r\n          positions[i * 3] = (Math.random() - 0.5) * 20;\r\n          positions[i * 3 + 1] = (Math.random() - 0.5) * 20;\r\n          positions[i * 3 + 2] = (Math.random() - 0.5) * 20;\r\n  \r\n          color.setHSL(Math.random() * 0.1 + 0.6, 0.8, 0.5);\r\n          colors[i * 3] = color.r;\r\n          colors[i * 3 + 1] = color.g;\r\n          colors[i * 3 + 2] = color.b;\r\n  \r\n          sizes[i] = Math.random() * 0.2 + 0.05;\r\n        }\r\n  \r\n        const geometry = new THREE.BufferGeometry();\r\n        geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n        geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\r\n        geometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\r\n  \r\n        const particleTexture = createCircleTexture();\r\n        const particleMaterial = new THREE.PointsMaterial({\r\n          size: 0.2,\r\n          map: particleTexture,\r\n          vertexColors: true,\r\n          blending: THREE.AdditiveBlending,\r\n          transparent: true,\r\n          opacity: 0.6,\r\n          depthWrite: false,\r\n          sizeAttenuation: true\r\n        });\r\n  \r\n        particles = new THREE.Points(geometry, particleMaterial);\r\n        scene.add(particles);\r\n  \r\n        camera.position.z = 10;\r\n      };\r\n  \r\n      const animate = () => {\r\n        requestAnimationFrame(animate);\r\n        const time = clock.getElapsedTime();\r\n        \r\n        if (particles) {\r\n          particles.rotation.x = time * 0.03;\r\n          particles.rotation.y = time * 0.05;\r\n  \r\n          const positions = particles.geometry.attributes.position.array;\r\n          const sizes = particles.geometry.attributes.size.array;\r\n  \r\n          for (let i = 0; i < positions.length; i += 3) {\r\n            const scale = Math.sin(time + positions[i] * 0.5) * 0.5 + 0.5;\r\n            sizes[i / 3] = (Math.random() * 0.2 + 0.05) * scale;\r\n  \r\n            positions[i] += Math.sin(time * 0.7 + positions[i + 1]) * 0.01;\r\n            positions[i + 1] += Math.cos(time * 0.8 + positions[i]) * 0.01;\r\n            positions[i + 2] += Math.sin(time * 0.9 + positions[i + 2]) * 0.01;\r\n          }\r\n  \r\n          particles.geometry.attributes.position.needsUpdate = true;\r\n          particles.geometry.attributes.size.needsUpdate = true;\r\n        }\r\n  \r\n        renderer.render(scene, camera);\r\n      };\r\n  \r\n      const handleResize = () => {\r\n        camera.aspect = window.innerWidth / window.innerHeight;\r\n        camera.updateProjectionMatrix();\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n      };\r\n  \r\n      onMounted(() => {\r\n        init();\r\n        animate();\r\n        window.addEventListener('resize', handleResize);\r\n      });\r\n  \r\n      onUnmounted(() => {\r\n        if (renderer) {\r\n          renderer.dispose();\r\n        }\r\n        window.removeEventListener('resize', handleResize);\r\n      });\r\n  \r\n      return { container };\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .scene-container {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: -1;\r\n  }\r\n  \r\n  .logo-container {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    z-index: 1;\r\n  }\r\n  \r\n  .logo-overlay {\r\n    max-width: 500px;\r\n    width: 500px;\r\n    height: auto;\r\n    filter: drop-shadow(0 0 15px rgba(255, 255, 255, 0.8));\r\n    animation: pulse 3s infinite;\r\n  }\r\n  \r\n  @keyframes pulse {\r\n    0% {\r\n      transform: scale(1);\r\n      opacity: 1;\r\n    }\r\n    50% {\r\n      transform: scale(1.03);\r\n      opacity: 0.9;\r\n    }\r\n    100% {\r\n      transform: scale(1);\r\n      opacity: 1;\r\n    }\r\n  }\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}