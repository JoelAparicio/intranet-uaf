{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-5dbaf8be\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1"],"sources":["C:\\laragon\\www\\intranet-frontend\\src\\components\\ThreeScene.vue"],"sourcesContent":["<template>\r\n    <div ref=\"container\"></div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { onMounted, onUnmounted, ref } from 'vue';\r\n  import * as THREE from 'three';\r\n  \r\n  export default {\r\n    setup() {\r\n      const container = ref(null);\r\n      let scene, camera, renderer, particles;\r\n      const clock = new THREE.Clock();\r\n  \r\n      const init = () => {\r\n        scene = new THREE.Scene();\r\n        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n        renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        renderer.setClearColor(0xffffff, 1); // Fondo blanco\r\n        container.value.appendChild(renderer.domElement);\r\n  \r\n        // Crear sistema de partículas\r\n        const particleCount = 2000;\r\n        const positions = new Float32Array(particleCount * 3);\r\n        const sizes = new Float32Array(particleCount);\r\n  \r\n        for (let i = 0; i < particleCount; i++) {\r\n          positions[i * 3] = (Math.random() - 0.5) * 10;\r\n          positions[i * 3 + 1] = (Math.random() - 0.5) * 10;\r\n          positions[i * 3 + 2] = (Math.random() - 0.5) * 10;\r\n          sizes[i] = Math.random() * 0.01 + 0.002; // Partículas mucho más pequeñas\r\n        }\r\n  \r\n        const geometry = new THREE.BufferGeometry();\r\n        geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n        geometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));\r\n  \r\n        const particleMaterial = new THREE.PointsMaterial({\r\n          color: 0x024a9f,\r\n          size: 0.01,\r\n          sizeAttenuation: true\r\n        });\r\n  \r\n        particles = new THREE.Points(geometry, particleMaterial);\r\n        scene.add(particles);\r\n  \r\n        // Añadir logo\r\n        const loader = new THREE.TextureLoader();\r\n        loader.load('../assets/UAF_logo.png', (texture) => {\r\n          const material = new THREE.SpriteMaterial({ map: texture });\r\n          const logo = new THREE.Sprite(material);\r\n          logo.scale.set(1, 1, 1); // Ajusta este valor si el logo es muy grande o pequeño\r\n          scene.add(logo);\r\n          console.log('Logo cargado exitosamente');\r\n        }, undefined, (error) => {\r\n          console.error('Error al cargar el logo:', error);\r\n        });\r\n  \r\n        camera.position.z = 5;\r\n      };\r\n  \r\n      const animate = () => {\r\n        requestAnimationFrame(animate);\r\n        const time = clock.getElapsedTime();\r\n        \r\n        if (particles) {\r\n          particles.rotation.x = time * 0.01;\r\n          particles.rotation.y = time * 0.02;\r\n  \r\n          const positions = particles.geometry.attributes.position.array;\r\n          for (let i = 0; i < positions.length; i += 3) {\r\n            positions[i] += Math.sin(time + positions[i + 1]) * 0.001;\r\n            positions[i + 1] += Math.cos(time + positions[i]) * 0.001;\r\n          }\r\n          particles.geometry.attributes.position.needsUpdate = true;\r\n        }\r\n  \r\n        renderer.render(scene, camera);\r\n      };\r\n  \r\n      const handleResize = () => {\r\n        camera.aspect = window.innerWidth / window.innerHeight;\r\n        camera.updateProjectionMatrix();\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n      };\r\n  \r\n      onMounted(() => {\r\n        init();\r\n        animate();\r\n        window.addEventListener('resize', handleResize);\r\n      });\r\n  \r\n      onUnmounted(() => {\r\n        if (renderer) {\r\n          renderer.dispose();\r\n        }\r\n        window.removeEventListener('resize', handleResize);\r\n      });\r\n  \r\n      return { container };\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  div {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: -1;\r\n  }\r\n  </style>"],"mappings":";;;EACSA,GAAG,EAAC;AAAW;;uBAApBC,mBAAA,CAA2B,OAA3BC,UAA2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}